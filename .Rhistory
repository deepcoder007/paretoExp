z_1 <-  (X$X1-theta[zz,4])/theta_curr[6]
z_2 <-  (X$X2-theta[zz,5])/theta_curr[7]
w_0 <- N*theta[zz,1]/(theta[zz,1]+theta[zz,2]+theta[zz,3])
w_1 <- N*theta[zz,3]/(theta[zz,1]+theta[zz,2]+theta[zz,3])
w_2 <- N*theta[zz,2]/(theta[zz,1]+theta[zz,2]+theta[zz,3])
w<-rbind(w,unname(c(w_0,w_1,w_2)))  # The ordinalities of the z1(=,>,<)z2
z <- 0
for ( j in 1:N )  # for all the X_i
{
z[j] <- max( z_1[j], z_2[j] )
}
# calculate the [alpha]
theta_curr[1] <- N/( sum(log(1+z))+
(theta[zz,2]*w_1)/(theta[zz,1]*(theta[zz,1]+theta[zz,2]))+
(theta[zz,3]*w_2)/(theta[zz,1]*(theta[zz,1]+theta[zz,3])) )
theta_curr[2] <- N/( sum(log(1+z_1))+
(theta[zz,1]*w_1)/(theta[zz,2]*(theta[zz,1]+theta[zz,2]))+
(w_0)/(theta[zz,2]) )
theta_curr[3] <- N/( sum(log(1+z_2))+
(theta[zz,1]*w_2)/(theta[zz,3]*(theta[zz,1]+theta[zz,2]))+
(w_0)/(theta[zz,3]) )
# solving a numerical equation to find the value of theta_curr[6] and theta_curr[7]
theta <- rbind( theta, theta_curr )
zz <- zz + 1
if( ((abs(theta[zz,6]-theta[zz-1,6])/theta[zz-1,6]) < 0.01) && ((abs(theta[zz,7]-theta[zz-1,7])/theta[zz-1,7]) < 0.01 ) ) {
break;
}
}
theta_big <- rbind(theta_big,theta_curr)
#  print(c("Theta is : ",theta_curr))
err <- abs((Q_theta(theta_big[i+1,],X)-Q_theta(theta_big[i,],X))/(Q_theta(theta_big[i,],X)))
print(c("[Q_theta_t+1 - Q_theta_t] :",err))
i <- i+1
}
theta_final <- rbind(theta_final,theta_curr)
}
View(theta)
View(theta_final)
# The solution of assignment from Statistical Simulation Lab
# Code for the bivariate case
# The original parameters of the distribution
require(POT)
require(rootSolve)
set.seed(100)
alpha_0_orig = 2
alpha_1_orig = 2
alpha_2_orig = 2
mu_0_orig = 0
mu_1_orig = 1
mu_2_orig = 1
sigma_0_orig = 1
sigma_1_orig = 1
sigma_2_orig = 1
theta_orig = c(alpha_0_orig,alpha_1_orig,alpha_2_orig,mu_1_orig,mu_2_orig,sigma_1_orig,sigma_2_orig)
theta_orig_frame <- data.frame(alpha_0_orig,alpha_1_orig,alpha_2_orig,mu_1_orig,mu_2_orig,sigma_1_orig,sigma_2_orig)
colnames(theta_orig_frame)<-c("alpha_0","alpha_1","alpha_2","mu_1","mu_2","sigma_1","sigma_2")
N = 1000     # The number of samples to generate
# Generate the input data first
# package for the generalized pareto distribution
getPar<- function(N,alpha,mu,sigma) {
u <- exp(-log(runif(N))/alpha)
return (mu+sigma*(u-1))
}
Y<-data.frame(getPar(N,alpha_0_orig,mu_0_orig,sigma_0_orig),
getPar(N,alpha_1_orig,mu_1_orig,sigma_1_orig),
getPar(N,alpha_2_orig,mu_2_orig,sigma_2_orig) )
colnames(Y)<-c("Y0","Y1","Y2")
X1 <- 0
X2 <- 0
for(i in 1:N)
{
X1[i]<-min( Y$Y0[i]*sigma_1_orig+mu_1_orig , Y$Y1[i] )
X2[i]<-min( Y$Y0[i]*sigma_2_orig+mu_2_orig , Y$Y2[i] )
}
X<-data.frame(X1,X2)
#  X is the data frame of the sample
print("Sample Data Generated")
# loglikelihood of observed data set
Q_theta <- function( theta_t, X ) {
# at time (t)
z_1_t <-  (X$X1-theta_t$mu_1)/theta_t$sigma_1
z_2_t <-  (X$X2-theta_t$mu_2)/theta_t$sigma_2
replace( z_1_t, is.na(z_1_t), 0)
replace( z_2_t, is.na(z_2_t), 0)
w_0 <- N*theta_t$alpha_0/(theta_t$alpha_0+theta_t$alpha_1+theta_t$alpha_2)
w_1 <- N*theta_t$alpha_2/(theta_t$alpha_0+theta_t$alpha_1+theta_t$alpha_2)
w_2 <- N*theta_t$alpha_1/(theta_t$alpha_0+theta_t$alpha_1+theta_t$alpha_2)
n <- dim(X)[1]
z <- 0
for ( j in 1:n )  # for all the X_i
{
z[j] <- max( z_1_t[j],z_2_t[j] )
}
e <- N*log(theta_t$alpha_0*theta_t$alpha_1*theta_t$alpha_2)
for(i in 1:n)
{
e <- e - theta_t$alpha_0*( log(1+z[i]) +  (theta_t$alpha_2*w_2)/(theta_t$alpha_0*(theta_t$alpha_0+theta_t$alpha_2)) + (theta_t$alpha_1*w_1)/(theta_t$alpha_0*(theta_t$alpha_0+theta_t$alpha_1)) )
e <- e - theta_t$alpha_1*( log(1+z_1_t[i]) + (theta_t$alpha_0*w_1)/(theta_t$alpha_1*(theta_t$alpha_0 + theta_t$alpha_1)) + (w_0)/(theta_t$alpha_1) )
e <- e - theta_t$alpha_2*( log(1+z_2_t[i]) + (theta_t$alpha_0*w_2)/(theta_t$alpha_2*(theta_t$alpha_0 + theta_t$alpha_2)) + (w_0)/(theta_t$alpha_2) )
}
return(e);
}
#------------------------------------------------
#   Start the EM Algo
#------------------------------------------------
err_struct<-err
theta_final<- data.frame(0,0,0,0,0,0,0)
colnames(theta_final)<-c("alpha_0","alpha_1","alpha_2","mu_1","mu_2","sigma_1","sigma_2")
# the last calculated value of theta will be theta_big[i]
for(iii in 1:100 ) {
# The theta_0 vector with theta_0 = (alpha_0,alpha_1,alpha_2,mu_1,mu_2,sigma_1,sigma_2)
theta <- data.frame(runif(1,1,5),runif(1,1,5),runif(1,1,5),min(X$X1),min(X$X2),runif(1,1,5),runif(1,1,5))
theta <- rbind(theta,c(runif(1,1,5),runif(1,1,5),runif(1,1,5),min(X$X1),min(X$X2),runif(1,1,5),runif(1,1,5)))
colnames(theta)<-c("alpha_0","alpha_1","alpha_2","mu_1","mu_2","sigma_1","sigma_2")
# the final update vector
theta_big <- theta
colnames(theta_big)<-c("alpha_0","alpha_1","alpha_2","mu_1","mu_2","sigma_1","sigma_2")
# The w vector is w = (w_0,w_1,w_2)
w<-data.frame(0,0,0)
colnames(w)<-c("w_0","w_1","w_2")
i<-2
zz<-2    # The counting variable for the inner loop
err<-100000000
print(c("At EM iteration : ",iii,"-------------------"))
theta_curr <- 0
while( abs(err) > 0.00001 )
{
print(c("Iteration ",i-1," Started"))
theta_curr <-0   # the new vector to be initialized
while(1) {
theta_curr <- 0
# trivial to calculate [mu]
theta_curr[4] <- min(X$X1)
theta_curr[5] <- min(X$X2)
# Calculate the [sigma]
sm2 <- (N*(theta[zz,1]+theta[zz,2]))/(theta[zz,1]+theta[zz,2]+1)
sm <- 0
for(j in 1:N) {
sm <- sm + 1/(theta[zz,6]+X$X1[j]-theta[zz,4])
}
if( abs(sm) < 0.001 )
{
print(c("Small value 1: ",sm))
}
theta_curr[6] <- ( sm2 /sm )
sm <- 0
sm2 <- (N*(theta[zz,1]+theta[zz,3]))/(theta[zz,1]+theta[zz,3]+1)
for(j in 1:N) {
sm <- sm + 1/(theta[zz,7]+X$X2[j]-theta[zz,5])
}
if( abs(sm)<0.1 )
{
print(c("Small value 2 :",sm))
}
theta_curr[7] <- ( sm2 / sm )
#-------------------------------------------------------------------
z_1 <-  (X$X1-theta[zz,4])/theta_curr[6]
z_2 <-  (X$X2-theta[zz,5])/theta_curr[7]
w_0 <- N*theta[zz,1]/(theta[zz,1]+theta[zz,2]+theta[zz,3])
w_1 <- N*theta[zz,3]/(theta[zz,1]+theta[zz,2]+theta[zz,3])
w_2 <- N*theta[zz,2]/(theta[zz,1]+theta[zz,2]+theta[zz,3])
w<-rbind(w,unname(c(w_0,w_1,w_2)))  # The ordinalities of the z1(=,>,<)z2
z <- 0
for ( j in 1:N )  # for all the X_i
{
z[j] <- max( z_1[j], z_2[j] )
}
# calculate the [alpha]
theta_curr[1] <- N/( sum(log(1+z))+
(theta[zz,2]*w_1)/(theta[zz,1]*(theta[zz,1]+theta[zz,2]))+
(theta[zz,3]*w_2)/(theta[zz,1]*(theta[zz,1]+theta[zz,3])) )
theta_curr[2] <- N/( sum(log(1+z_1))+
(theta[zz,1]*w_1)/(theta[zz,2]*(theta[zz,1]+theta[zz,2]))+
(w_0)/(theta[zz,2]) )
theta_curr[3] <- N/( sum(log(1+z_2))+
(theta[zz,1]*w_2)/(theta[zz,3]*(theta[zz,1]+theta[zz,2]))+
(w_0)/(theta[zz,3]) )
# solving a numerical equation to find the value of theta_curr[6] and theta_curr[7]
theta <- rbind( theta, theta_curr )
zz <- zz + 1
if( ((abs(theta[zz,6]-theta[zz-1,6])/theta[zz-1,6]) < 0.01) && ((abs(theta[zz,7]-theta[zz-1,7])/theta[zz-1,7]) < 0.01 ) ) {
break;
}
}
theta_big <- rbind(theta_big,theta_curr)
#  print(c("Theta is : ",theta_curr))
err <- abs((Q_theta(theta_big[i+1,],X)-Q_theta(theta_big[i,],X))/(Q_theta(theta_big[i,],X)))
print(c("[Q_theta_t+1 - Q_theta_t] :",err))
i <- i+1
}
theta_final <- rbind(theta_final,theta_curr)
}
View(theta_final)
# The solution of assignment from Statistical Simulation Lab
# Code for the bivariate case
# The original parameters of the distribution
require(POT)
require(rootSolve)
set.seed(100)
alpha_0_orig = 2
alpha_1_orig = 2
alpha_2_orig = 2
mu_0_orig = 0
mu_1_orig = 1
mu_2_orig = 1
sigma_0_orig = 1
sigma_1_orig = 1
sigma_2_orig = 1
theta_orig = c(alpha_0_orig,alpha_1_orig,alpha_2_orig,mu_1_orig,mu_2_orig,sigma_1_orig,sigma_2_orig)
theta_orig_frame <- data.frame(alpha_0_orig,alpha_1_orig,alpha_2_orig,mu_1_orig,mu_2_orig,sigma_1_orig,sigma_2_orig)
colnames(theta_orig_frame)<-c("alpha_0","alpha_1","alpha_2","mu_1","mu_2","sigma_1","sigma_2")
N = 1000     # The number of samples to generate
# Generate the input data first
# package for the generalized pareto distribution
getPar<- function(N,alpha,mu,sigma) {
u <- exp(-log(runif(N))/alpha)
return (mu+sigma*(u-1))
}
Y<-data.frame(getPar(N,alpha_0_orig,mu_0_orig,sigma_0_orig),
getPar(N,alpha_1_orig,mu_1_orig,sigma_1_orig),
getPar(N,alpha_2_orig,mu_2_orig,sigma_2_orig) )
colnames(Y)<-c("Y0","Y1","Y2")
X1 <- 0
X2 <- 0
for(i in 1:N)
{
X1[i]<-min( Y$Y0[i]*sigma_1_orig+mu_1_orig , Y$Y1[i] )
X2[i]<-min( Y$Y0[i]*sigma_2_orig+mu_2_orig , Y$Y2[i] )
}
X<-data.frame(X1,X2)
#  X is the data frame of the sample
print("Sample Data Generated")
# loglikelihood of observed data set
Q_theta <- function( theta_t, X ) {
# at time (t)
z_1_t <-  (X$X1-theta_t$mu_1)/theta_t$sigma_1
z_2_t <-  (X$X2-theta_t$mu_2)/theta_t$sigma_2
replace( z_1_t, is.na(z_1_t), 0)
replace( z_2_t, is.na(z_2_t), 0)
w_0 <- N*theta_t$alpha_0/(theta_t$alpha_0+theta_t$alpha_1+theta_t$alpha_2)
w_1 <- N*theta_t$alpha_2/(theta_t$alpha_0+theta_t$alpha_1+theta_t$alpha_2)
w_2 <- N*theta_t$alpha_1/(theta_t$alpha_0+theta_t$alpha_1+theta_t$alpha_2)
n <- dim(X)[1]
z <- 0
for ( j in 1:n )  # for all the X_i
{
z[j] <- max( z_1_t[j],z_2_t[j] )
}
e <- N*log(theta_t$alpha_0*theta_t$alpha_1*theta_t$alpha_2)
for(i in 1:n)
{
e <- e - theta_t$alpha_0*( log(1+z[i]) +  (theta_t$alpha_2*w_2)/(theta_t$alpha_0*(theta_t$alpha_0+theta_t$alpha_2)) + (theta_t$alpha_1*w_1)/(theta_t$alpha_0*(theta_t$alpha_0+theta_t$alpha_1)) )
e <- e - theta_t$alpha_1*( log(1+z_1_t[i]) + (theta_t$alpha_0*w_1)/(theta_t$alpha_1*(theta_t$alpha_0 + theta_t$alpha_1)) + (w_0)/(theta_t$alpha_1) )
e <- e - theta_t$alpha_2*( log(1+z_2_t[i]) + (theta_t$alpha_0*w_2)/(theta_t$alpha_2*(theta_t$alpha_0 + theta_t$alpha_2)) + (w_0)/(theta_t$alpha_2) )
}
return(e);
}
#------------------------------------------------
#   Start the EM Algo
#------------------------------------------------
err_struct<-err
theta_final<- data.frame(0,0,0,0,0,0,0)
colnames(theta_final)<-c("alpha_0","alpha_1","alpha_2","mu_1","mu_2","sigma_1","sigma_2")
# the last calculated value of theta will be theta_big[i]
for(iii in 1:100 ) {
# The theta_0 vector with theta_0 = (alpha_0,alpha_1,alpha_2,mu_1,mu_2,sigma_1,sigma_2)
theta <- data.frame(runif(1,1,5),runif(1,1,5),runif(1,1,5),min(X$X1),min(X$X2),runif(1,1,5),runif(1,1,5))
theta <- rbind(theta,c(1.5,1.5,1.5,min(X$X1),min(X$X2),1.5,1.5))
colnames(theta)<-c("alpha_0","alpha_1","alpha_2","mu_1","mu_2","sigma_1","sigma_2")
# the final update vector
theta_big <- theta
colnames(theta_big)<-c("alpha_0","alpha_1","alpha_2","mu_1","mu_2","sigma_1","sigma_2")
# The w vector is w = (w_0,w_1,w_2)
w<-data.frame(0,0,0)
colnames(w)<-c("w_0","w_1","w_2")
i<-2
zz<-2    # The counting variable for the inner loop
err<-100000000
print(c("At EM iteration : ",iii,"-------------------"))
theta_curr <- 0
while( abs(err) > 0.00001 )
{
print(c("Iteration ",i-1," Started"))
theta_curr <-0   # the new vector to be initialized
while(1) {
theta_curr <- 0
# trivial to calculate [mu]
theta_curr[4] <- min(X$X1)
theta_curr[5] <- min(X$X2)
# Calculate the [sigma]
sm2 <- (N*(theta[zz,1]+theta[zz,2]))/(theta[zz,1]+theta[zz,2]+1)
sm <- 0
for(j in 1:N) {
sm <- sm + 1/(theta[zz,6]+X$X1[j]-theta[zz,4])
}
if( abs(sm) < 0.001 )
{
print(c("Small value 1: ",sm))
}
theta_curr[6] <- ( sm2 /sm )
sm <- 0
sm2 <- (N*(theta[zz,1]+theta[zz,3]))/(theta[zz,1]+theta[zz,3]+1)
for(j in 1:N) {
sm <- sm + 1/(theta[zz,7]+X$X2[j]-theta[zz,5])
}
if( abs(sm)<0.1 )
{
print(c("Small value 2 :",sm))
}
theta_curr[7] <- ( sm2 / sm )
#-------------------------------------------------------------------
z_1 <-  (X$X1-theta[zz,4])/theta_curr[6]
z_2 <-  (X$X2-theta[zz,5])/theta_curr[7]
w_0 <- N*theta[zz,1]/(theta[zz,1]+theta[zz,2]+theta[zz,3])
w_1 <- N*theta[zz,3]/(theta[zz,1]+theta[zz,2]+theta[zz,3])
w_2 <- N*theta[zz,2]/(theta[zz,1]+theta[zz,2]+theta[zz,3])
w<-rbind(w,unname(c(w_0,w_1,w_2)))  # The ordinalities of the z1(=,>,<)z2
z <- 0
for ( j in 1:N )  # for all the X_i
{
z[j] <- max( z_1[j], z_2[j] )
}
# calculate the [alpha]
theta_curr[1] <- N/( sum(log(1+z))+
(theta[zz,2]*w_1)/(theta[zz,1]*(theta[zz,1]+theta[zz,2]))+
(theta[zz,3]*w_2)/(theta[zz,1]*(theta[zz,1]+theta[zz,3])) )
theta_curr[2] <- N/( sum(log(1+z_1))+
(theta[zz,1]*w_1)/(theta[zz,2]*(theta[zz,1]+theta[zz,2]))+
(w_0)/(theta[zz,2]) )
theta_curr[3] <- N/( sum(log(1+z_2))+
(theta[zz,1]*w_2)/(theta[zz,3]*(theta[zz,1]+theta[zz,2]))+
(w_0)/(theta[zz,3]) )
# solving a numerical equation to find the value of theta_curr[6] and theta_curr[7]
theta <- rbind( theta, theta_curr )
zz <- zz + 1
if( ((abs(theta[zz,6]-theta[zz-1,6])/theta[zz-1,6]) < 0.01) && ((abs(theta[zz,7]-theta[zz-1,7])/theta[zz-1,7]) < 0.01 ) ) {
break;
}
}
theta_big <- rbind(theta_big,theta_curr)
#  print(c("Theta is : ",theta_curr))
err <- abs((Q_theta(theta_big[i+1,],X)-Q_theta(theta_big[i,],X))/(Q_theta(theta_big[i,],X)))
print(c("[Q_theta_t+1 - Q_theta_t] :",err))
i <- i+1
}
theta_final <- rbind(theta_final,theta_curr)
}
View(theta)
View(theta_final)
# The solution of assignment from Statistical Simulation Lab
# Code for the bivariate case
# The original parameters of the distribution
require(POT)
require(rootSolve)
set.seed(100)
alpha_0_orig = 2
alpha_1_orig = 2
alpha_2_orig = 2
mu_0_orig = 0
mu_1_orig = 1
mu_2_orig = 1
sigma_0_orig = 1
sigma_1_orig = 1
sigma_2_orig = 1
theta_orig = c(alpha_0_orig,alpha_1_orig,alpha_2_orig,mu_1_orig,mu_2_orig,sigma_1_orig,sigma_2_orig)
theta_orig_frame <- data.frame(alpha_0_orig,alpha_1_orig,alpha_2_orig,mu_1_orig,mu_2_orig,sigma_1_orig,sigma_2_orig)
colnames(theta_orig_frame)<-c("alpha_0","alpha_1","alpha_2","mu_1","mu_2","sigma_1","sigma_2")
N = 1000     # The number of samples to generate
# Generate the input data first
# package for the generalized pareto distribution
getPar<- function(N,alpha,mu,sigma) {
u <- exp(-log(runif(N))/alpha)
return (mu+sigma*(u-1))
}
Y<-data.frame(getPar(N,alpha_0_orig,mu_0_orig,sigma_0_orig),
getPar(N,alpha_1_orig,mu_1_orig,sigma_1_orig),
getPar(N,alpha_2_orig,mu_2_orig,sigma_2_orig) )
colnames(Y)<-c("Y0","Y1","Y2")
X1 <- 0
X2 <- 0
for(i in 1:N)
{
X1[i]<-min( Y$Y0[i]*sigma_1_orig+mu_1_orig , Y$Y1[i] )
X2[i]<-min( Y$Y0[i]*sigma_2_orig+mu_2_orig , Y$Y2[i] )
}
X<-data.frame(X1,X2)
#  X is the data frame of the sample
print("Sample Data Generated")
# loglikelihood of observed data set
Q_theta <- function( theta_t, X ) {
# at time (t)
z_1_t <-  (X$X1-theta_t$mu_1)/theta_t$sigma_1
z_2_t <-  (X$X2-theta_t$mu_2)/theta_t$sigma_2
replace( z_1_t, is.na(z_1_t), 0)
replace( z_2_t, is.na(z_2_t), 0)
w_0 <- N*theta_t$alpha_0/(theta_t$alpha_0+theta_t$alpha_1+theta_t$alpha_2)
w_1 <- N*theta_t$alpha_2/(theta_t$alpha_0+theta_t$alpha_1+theta_t$alpha_2)
w_2 <- N*theta_t$alpha_1/(theta_t$alpha_0+theta_t$alpha_1+theta_t$alpha_2)
n <- dim(X)[1]
z <- 0
for ( j in 1:n )  # for all the X_i
{
z[j] <- max( z_1_t[j],z_2_t[j] )
}
e <- N*log(theta_t$alpha_0*theta_t$alpha_1*theta_t$alpha_2)
for(i in 1:n)
{
e <- e - theta_t$alpha_0*( log(1+z[i]) +  (theta_t$alpha_2*w_2)/(theta_t$alpha_0*(theta_t$alpha_0+theta_t$alpha_2)) + (theta_t$alpha_1*w_1)/(theta_t$alpha_0*(theta_t$alpha_0+theta_t$alpha_1)) )
e <- e - theta_t$alpha_1*( log(1+z_1_t[i]) + (theta_t$alpha_0*w_1)/(theta_t$alpha_1*(theta_t$alpha_0 + theta_t$alpha_1)) + (w_0)/(theta_t$alpha_1) )
e <- e - theta_t$alpha_2*( log(1+z_2_t[i]) + (theta_t$alpha_0*w_2)/(theta_t$alpha_2*(theta_t$alpha_0 + theta_t$alpha_2)) + (w_0)/(theta_t$alpha_2) )
}
return(e);
}
#------------------------------------------------
#   Start the EM Algo
#------------------------------------------------
err_struct<-err
theta_final<- data.frame(0,0,0,0,0,0,0)
colnames(theta_final)<-c("alpha_0","alpha_1","alpha_2","mu_1","mu_2","sigma_1","sigma_2")
# the last calculated value of theta will be theta_big[i]
for(iii in 1:100 ) {
# The theta_0 vector with theta_0 = (alpha_0,alpha_1,alpha_2,mu_1,mu_2,sigma_1,sigma_2)
theta <- data.frame(runif(1,1,5),runif(1,1,5),runif(1,1,5),min(X$X1),min(X$X2),runif(1,1,5),runif(1,1,5))
theta <- rbind(theta,c(1.5,1.5,1.5,min(X$X1),min(X$X2),1.5,1.5))
colnames(theta)<-c("alpha_0","alpha_1","alpha_2","mu_1","mu_2","sigma_1","sigma_2")
# the final update vector
theta_big <- theta
colnames(theta_big)<-c("alpha_0","alpha_1","alpha_2","mu_1","mu_2","sigma_1","sigma_2")
# The w vector is w = (w_0,w_1,w_2)
w<-data.frame(0,0,0)
colnames(w)<-c("w_0","w_1","w_2")
i<-2
zz<-2    # The counting variable for the inner loop
err<-100000000
print(c("At EM iteration : ",iii,"-------------------"))
theta_curr <- 0
while( abs(err) > 0.00001 )
{
print(c("Iteration ",i-1," Started"))
theta_curr <-0   # the new vector to be initialized
while(1) {
theta_curr <- 0
# trivial to calculate [mu]
theta_curr[4] <- min(X$X1)
theta_curr[5] <- min(X$X2)
# Calculate the [sigma]
sm2 <- (N*(theta[zz,1]+theta[zz,2]))/(theta[zz,1]+theta[zz,2]+1)
sm <- 0
for(j in 1:N) {
sm <- sm + 1/(theta[zz,6]+X$X1[j]-theta[zz,4])
}
if( abs(sm) < 0.001 )
{
print(c("Small value 1: ",sm))
}
theta_curr[6] <- ( sm2 /sm )
sm <- 0
sm2 <- (N*(theta[zz,1]+theta[zz,3]))/(theta[zz,1]+theta[zz,3]+1)
for(j in 1:N) {
sm <- sm + 1/(theta[zz,7]+X$X2[j]-theta[zz,5])
}
if( abs(sm)<0.1 )
{
print(c("Small value 2 :",sm))
}
theta_curr[7] <- ( sm2 / sm )
#-------------------------------------------------------------------
z_1 <-  (X$X1-theta[zz,4])/theta_curr[6]
z_2 <-  (X$X2-theta[zz,5])/theta_curr[7]
w_0 <- N*theta[zz,1]/(theta[zz,1]+theta[zz,2]+theta[zz,3])
w_1 <- N*theta[zz,3]/(theta[zz,1]+theta[zz,2]+theta[zz,3])
w_2 <- N*theta[zz,2]/(theta[zz,1]+theta[zz,2]+theta[zz,3])
w<-rbind(w,unname(c(w_0,w_1,w_2)))  # The ordinalities of the z1(=,>,<)z2
z <- 0
for ( j in 1:N )  # for all the X_i
{
z[j] <- max( z_1[j], z_2[j] )
}
# calculate the [alpha]
theta_curr[1] <- N/( sum(log(1+z))+
(theta[zz,2]*w_1)/(theta[zz,1]*(theta[zz,1]+theta[zz,2]))+
(theta[zz,3]*w_2)/(theta[zz,1]*(theta[zz,1]+theta[zz,3])) )
theta_curr[2] <- N/( sum(log(1+z_1))+
(theta[zz,1]*w_1)/(theta[zz,2]*(theta[zz,1]+theta[zz,2]))+
(w_0)/(theta[zz,2]) )
theta_curr[3] <- N/( sum(log(1+z_2))+
(theta[zz,1]*w_2)/(theta[zz,3]*(theta[zz,1]+theta[zz,2]))+
(w_0)/(theta[zz,3]) )
# solving a numerical equation to find the value of theta_curr[6] and theta_curr[7]
theta <- rbind( theta, theta_curr )
zz <- zz + 1
if( ((abs(theta[zz,6]-theta[zz-1,6])/theta[zz-1,6]) < 0.01) && ((abs(theta[zz,7]-theta[zz-1,7])/theta[zz-1,7]) < 0.01 ) ) {
break;
}
}
theta_big <- rbind(theta_big,theta_curr)
#  print(c("Theta is : ",theta_curr))
err <- abs((Q_theta(theta_big[i+1,],X)-Q_theta(theta_big[i,],X))/(Q_theta(theta_big[i,],X)))
print(c("[Q_theta_t+1 - Q_theta_t] :",err))
i <- i+1
}
theta_final <- rbind(theta_final,theta_curr)
}
# MSE calculation
theta_final<-theta_final[2:length(theta_final[,1]),]
mse_alpha_0 <- mean( (theta_final$alpha_0 - theta_orig[1])**2 )
mse_alpha_1 <- mean( (theta_final$alpha_1 - theta_orig[2])**2 )
mse_alpha_2 <- mean( (theta_final$alpha_2 - theta_orig[3])**2)
mse_mu_1 <- mean( (theta_final$mu_1 - theta_orig[4])**2 )
mse_mu_2 <- mean( (theta_final$mu_2 - theta_orig[5])**2 )
mse_sigma_1 <- mean( (theta_final$sigma_1 - theta_orig[6])**2 )
mse_sigma_2 <- mean( (theta_final$sigma_2 - theta_orig[7])**2 )
